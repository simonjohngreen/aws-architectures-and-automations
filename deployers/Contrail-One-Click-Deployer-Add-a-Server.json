{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Add a CentOS server and security group to an existing VPC and Subnet. Configure it ready to deploy with the Contrail Command UI into an existing cluster",
    "Parameters": {
        "InstanceName" : {
          "Description" : "Instance Name",
          "Type" : "String"
        },
        "AvailabilityZone" : {
          "Description" : "AWS Availability Zone",
          "Type" : "String"
        },
        "AMI": {
            "Description": "AMI Instance CentOS 7",
            "Type": "String",
            "Default": "ami-04cf43aca3e6f3de3"
        },
        "InstanceType": {
            "Description": "New Instance Type",
            "Type": "String",
            "Default": "m4.2xlarge"
        },
        "KeyName": {
            "Description": "SSH Key Name",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "VPCID": {
            "Description": "Existing AWS VPC ID to place the new instance",
            "Type": "String"
        },
        "SubnetID": {
            "ConstraintDescription": "Existing AWS Subnet ID to place the new instance",
            "Description": "CIDR block for the private subnet",
            "Type": "String"
        },
        "InstanceIPAddress" : {
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
          "Description" : "Instance static IP",
          "Type" : "String"
        },
        "SGSubnet1" : {
          "Description" : "The IP address range to be opened up on all ports towards this EC2 instances. This first entry will default to 0.0.0.0/0. Leave it blank if you do not want it populated",
          "Type": "String",
          "Default": "0.0.0.0/0"
        },
        "SGSubnet2" : {
          "Description" : "The IP address range to be opened up on all ports towards this EC2 instances. Leave it blank if you do not want it populated",
          "Type": "String"
        },
        "SGSubnet3" : {
          "Description" : "The IP address range to be opened up on all ports towards this EC2 instances. This first entry will default to 0.0.0.0/0. Leave it blank if you do not want it populated",
          "Type": "String"
        },
        "SGSubnet4" : {
          "Description" : "The IP address range to be opened up on all ports towards this EC2 instances. This first entry will default to 0.0.0.0/0. Leave it blank if you do not want it populated",
          "Type": "String"
        },
        "SgTcpFromPort1" : {
          "Description" : "The tcp from port to be opened up for SG subnet 1, if specified",
          "Type": "String",
          "Default": "0"
        },
        "SgTcpFromPort2" : {
          "Description" : "The tcp from port to be opened up for SG subnet 2, if specified",
          "Type": "String"
        },
        "SgTcpFromPort3" : {
          "Description" : "The tcp from port to be opened up for SG subnet 3, if specified",
          "Type": "String"
        },
        "SgTcpFromPort4" : {
          "Description" : "The tcp from port to be opened up for SG subnet 4, if specified",
          "Type": "String"
        },
        "SgTcpToPort1" : {
          "Description" : "The tcp to port to be opened up for SG subnet 1, if specified",
          "Type": "String",
          "Default": "64435"
        },
        "SgTcpToPort2" : {
          "Description" : "The tcp to port to be opened up for SG subnet 2, if specified",
          "Type": "String"
        },
        "SgTcpToPort3" : {
          "Description" : "The tcp to port to be opened up for SG subnet 3, if specified",
          "Type": "String"
        },
        "SgTcpToPort4" : {
          "Description" : "The tcp to port to be opened up for SG subnet 4, if specified",
          "Type": "String"
        },

        "VPCDOMAIN" : {
          "Description" : "VCP domain type",
          "Type" : "String",
          "Default": "default"
   	},
        "SSHPassword" : {
          "Description" : "VCP domain type",
          "Type" : "String",
          "Default": "EfrtGF5EDF_d54ERrf"
        }
    },
    "Conditions": {
        "HasSGSubnet1": { "Fn::Not": [ { "Fn::Equals": [{ "Ref": "SGSubnet1" }, ""] } ] },
        "HasSGSubnet2": { "Fn::Not": [ { "Fn::Equals": [{ "Ref": "SGSubnet2" }, ""] } ] },
        "HasSGSubnet3": { "Fn::Not": [ { "Fn::Equals": [{ "Ref": "SGSubnet3" }, ""] } ] },
        "HasSGSubnet4": { "Fn::Not": [ { "Fn::Equals": [{ "Ref": "SGSubnet4" }, ""] } ] }
    },
    "Resources": {
        "SgTcpSgEntry02" : {
                "Type": "AWS::EC2::SecurityGroupIngress",
                "Condition": "HasSGSubnet2",
                "Properties": { 
                        "GroupId": { "Ref": "SecurityGroupInstance" }, 
                        "IpProtocol": "tcp",
                        "FromPort": { "Ref": "SgTcpFromPort2" },
                        "ToPort": { "Ref": "SgTcpToPort2" },
                        "CidrIp": {"Ref" : "SGSubnet2"},
                        "Description": "allow inbound traffic to the instance on specified subnet subnet2"
                }
        },
        "SgTcpSgEntry03" : {
                "Type": "AWS::EC2::SecurityGroupIngress",
                "Condition": "HasSGSubnet3",
                "Properties": { 
                        "GroupId": { "Ref": "SecurityGroupInstance" }, 
                        "IpProtocol": "tcp",
                        "FromPort": { "Ref": "SgTcpFromPort3" },
                        "ToPort": { "Ref": "SgTcpToPort3" },
                        "CidrIp": {"Ref" : "SGSubnet3"},
                        "Description": "allow inbound traffic to the instance on specified subnet subnet3"
                }
        },
        "SgTcpSgEntry04" : {
                "Type": "AWS::EC2::SecurityGroupIngress",
                "Condition": "HasSGSubnet4",
                "Properties": { 
                        "GroupId": { "Ref": "SecurityGroupInstance" }, 
                        "IpProtocol": "tcp",
                        "FromPort": { "Ref": "SgTcpFromPort4" },
                        "ToPort": { "Ref": "SgTcpToPort4" },
                        "CidrIp": {"Ref" : "SGSubnet4"},
                        "Description": "allow inbound traffic to the instance on specified subnet subnet4"
                }
        },
        "SecurityGroupInstance": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCID"
                },
                "GroupDescription": "Security group for brown field contrail instance Instance",
                "GroupName" : { "Fn::Join" : [ ".", [ "OneCLick Instance Private SG", { "Ref" : "InstanceName" }, { "Ref" : "AvailabilityZone" } ] ] },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp", 
                        "FromPort": { "Ref": "SgTcpFromPort1" }, 
                        "ToPort": { "Ref": "SgTcpToPort1" }, 
                        "CidrIp": {"Ref" : "SGSubnet1"},
                        "Description": "allow inbound traffic to the instance on specified subnet subnet1"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "0.0.0.0/0",
                        "Description": "allow all outbound traffic"
		    }
		],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join" : [ ".", [ "OneClick New Instance Private Security Group", { "Ref" : "InstanceName" }, { "Ref" : "AvailabilityZone" } ] ] }
                    }
                ]
            }
        },
        "SGIngressSecurityLoopbackRule": {
          "Type": "AWS::EC2::SecurityGroupIngress",
          "Properties": {
            "GroupId" : {
              "Ref" : "SecurityGroupInstance"
            },
            "IpProtocol": "-1",
            "FromPort": "-1",
            "ToPort": "-1",
            "SourceSecurityGroupId": {
              "Ref": "SecurityGroupInstance"
            },
            "Description": "loopback rule"
          }
        },
        "NewInstance": {
          "Type": "AWS::EC2::Instance",
          "DependsOn": [ "Eth0Controller" ],
          "Properties": {
              "AvailabilityZone" : { "Ref" : "AvailabilityZone" },
              "BlockDeviceMappings" : [
                  {
                       "DeviceName" : "/dev/sda1",
                       "Ebs" : {
                       "VolumeSize" : "300"
                       }
                  }
              ],
              "ImageId": {
                  "Ref": "AMI"
              },
              "InstanceType": {
                  "Ref": "InstanceType"
              },
              "KeyName": {
                  "Ref": "KeyName"
              },
              "NetworkInterfaces" : [ {
                "NetworkInterfaceId" : {"Ref" : "Eth0Controller" },
                "DeviceIndex" : "0"
                }],
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": { "Fn::Join" : [ ".", [ "OneClick Instance", { "Ref" : "InstanceName" }, { "Ref" : "AvailabilityZone" } ] ] }
                  }
              ],
              "UserData": {
                  "Fn::Base64": {
                    "Fn::Join": [
                        "",
                        [
                          "#!/bin/bash -x\n",
                          "exec > /tmp/part-001.log 2>&1\n",
                          "echo 'root:", {"Ref": "SSHPassword"}, "' | chpasswd\n",
                          "sed -i \"s/PasswordAuthentication no/PasswordAuthentication yes/g\" /etc/ssh/sshd_config\n",
                          "echo \"\nPermitRootLogin yes\" | tee --append /etc/ssh/sshd_config\n",
                          "ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N \"\"\n",
                          "cat /root/.ssh/id_rsa.pub | tee --append /root/.ssh/authorized_keys\n",
                          "chmod 0600 /root/.ssh/id_rsa*\n",
                          "systemctl restart sshd.service\n",
                          "yum install -y yum-utils device-mapper-persistent-data lvm2\n", 
                          "yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n", 
                          "yum install -y bind-utils\n", 
                          "yum install -y ntp\n", 
                          "systemctl start ntpd\n", 
                          "systemctl enable ntpd\n",
                          "rm -f /etc/sysconfig/network-scripts/ifcfg-eth0\n",
                          "rm -f /var/run/dhclient*\n",
                          "systemctl restart network.service\n"
                        ]
                    ]
                  }
              }
            }
        },
        "Eth0Controller" : {
          "Type" : "AWS::EC2::NetworkInterface",
          "Properties" : {
            "Description"     : "eth0Controller",
            "GroupSet"        : [ { "Ref" : "SecurityGroupInstance" } ],
            "PrivateIpAddress" : { "Ref" : "InstanceIPAddress" },
            "SourceDestCheck" : "false",
            "SubnetId"        : { "Ref" : "SubnetID" },
            "Tags"            : [ {"Key" : "Name", "Value" : "Interface 0"}, {"Key" : "Interface", "Value" : "eth0"} ]
          }
        }
    },
    "Outputs" : {
           "NewInstanceIPAddress": {
                   "Description": "New Instance IP Address",
                   "Value": {
                               "Ref": "InstanceIPAddress"
                       }
           }
    }
}

